# -*- coding: utf-8 -*-
"""Sistema_Nóminas.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1S93zrTE9nLP-Bjma0WolzB7eimuuHQ2C
"""



"""#Ejercicio sistema de Nóminas

En este proyecto, gestionamos** empleados de diferentes categorías,** como programadores y analistas (se puede añadir más) cada uno con diferentes atributos.
 El **objetivo** del programa es **calcular la nómina de cada trabajador** en función de su categoría.

La base del sistema está en una **clase principal o clase padre **llamada  empleado, que contiene los **atributos comunes** a todos los empleados, como el *nombre y el salario. *

Si un trabajador es un **programador**, se le añadirá un atributo adicional que es el lenguaje de programación que domina. Si el trabajador no es programador, como en el caso de un analista, no se le asigna este atributo.

Para que el sistema de nóminas funcione correctamente, las subclases de empleado (como **Programador, Analista**, etc.) se agrupan en una clase **Empleado** (con mayúsula), que** contiene todos los trabajadores**.
 Esta clase permite añadir empleados a una lista mediante *el uso de append()*

El Sistema de Nóminas funciona por que **cada clase tiene un método para calcular la nómina ** considerando su salario base (atributo) y un posible incremento según su categoría. **El cálculo de la nómina es un método. **

Para facilitar la ejecución y el manejo de datos; los datos de los empleados se separa de la definición de clases y de la clases de Sistemas de Nóminas.
"""

aqclass Empleado:
    def __init__(self, nombre, salario):
        self.nombre = nombre
        self.salario = salario

class Programador(Empleado):
    def __init__(self, nombre, salario, lenguaje_programacion):
        super().__init__(nombre, salario)
        self.lenguaje_programacion = lenguaje_programacion

    def calcular_nomina(self) -> float:
        return self.salario * 1.1

class Analista(Empleado):
    def __init__(self, nombre, salario):
        super().__init__(nombre, salario)

    def calcular_nomina(self) -> float:
        return self.salario * 1.05

class Empleados: #####esto engloba los diferentes empleados (programadores y analistas)
    def __init__(self, lista_empleados):
        self.empleados = lista_empleados  # llamamos a la lista "lista_empleados" y lo guardamos en empleados dentro de Empleados

    def agregar_empleado(self, empleado):
        self.empleados.append(empleado)  # ahora llama a empleados (lista_empleados y los va agregando)

class Sistema_Nominas:
    def calcular_nominas(self, empleados):
        print('Calculando nóminas')
        print('====================')

        for empleado in empleados:
            if isinstance(empleado, Programador):  # Considerar si es programador, tiene un atributo de más (lenguaje_programacion)
                print(f'Nómina para: {empleado.nombre} - Lenguaje: {empleado.lenguaje_programacion}')
            else:
                print(f'Nómina para: {empleado.nombre}')
            print(f' - Total: {empleado.calcular_nomina()}')
            print('')

# Crear empleados y agregar a la lista
lista_empleados = []

# Crear empleados específicos
jon = Programador("Jon", 45_000, "Python")
maria = Programador("Maria", 35_000, "Java")
leo = Programador("Leo", 32_000, "HTML")
mireia = Analista("Mireia", 30_000)
maider = Analista("Maider", 33_000)

# Agregar empleados a la lista
lista_empleados.append(jon)
lista_empleados.append(maria)
lista_empleados.append(leo)
lista_empleados.append(mireia)
lista_empleados.append(maider)

# Crear instancia de Empleados
empleados_empresa = Empleados(lista_empleados)

# Sistema de nóminas
sistema_nominas = Sistema_Nominas()
sistema_nominas.calcular_nominas(empleados_empresa.empleados)
